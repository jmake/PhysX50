#include <ctype.h>

#include "PxPhysicsAPI.h"

#include "load_file.hpp" // LoadFile

using namespace physx;

#define MAX_NUM_ACTOR_SHAPES 128
#define MAX_NUM_MESH_VEC3S  1024

static PxVec3 gVertexBuffer[MAX_NUM_MESH_VEC3S];

std::vector< std::vector<float> > truncatedcube={{0,0,1.042011},{0.5621693,0,0.8773552},{-0.4798415,0.2928932,0.8773552},{0.2569714,-0.5,0.8773552},{0.8773552,0.2928932,0.4798415},{-0.9014684,0.2071068,0.4798415},{-0.5962706,0.7071068,0.4798415},{0.1405423,-0.9142136,0.4798415},{1.017898,0.2071068,-0.08232778},{0.7609261,0.7071068,0.08232778},{-1.017898,-0.2071068,0.08232778},{-0.2810846,1,0.08232778},{-0.2810846,-1,0.08232778},{0.2810846,-1,-0.08232778},{0.9014684,-0.2071068,-0.4798415},{0.2810846,1,-0.08232778},{-0.7609261,-0.7071068,-0.08232778},{-0.8773552,-0.2928932,-0.4798415},{-0.1405423,0.9142136,-0.4798415},{0.5962706,-0.7071068,-0.4798415},{0.4798415,-0.2928932,-0.8773552},{-0.5621693,0,-0.8773552},{-0.2569714,0.5,-0.8773552},{0,0,-1.042011}};


float rand(float loVal, float hiVal)
{
	return loVal + (float(rand())/float(RAND_MAX))*(hiVal - loVal);
}


static void GetConvexMesh(const PxGeometry& geom, std::vector< std::vector<double> >& vertices, std::vector< std::vector<double> >& faces)
{
  if(geom.getType() == PxGeometryType::eCONVEXMESH)
  {
      const PxConvexMeshGeometry& convexGeom = static_cast<const PxConvexMeshGeometry&>(geom);

      //Compute triangles for each polygon.
      const PxVec3& scale = convexGeom.scale.scale;

      PxConvexMesh* mesh = convexGeom.convexMesh;
      const PxU32 nbPolys = mesh->getNbPolygons();
      const PxU8* polygons = mesh->getIndexBuffer();
      const PxVec3* verts = mesh->getVertices();
      PxU32 nbVerts = mesh->getNbVertices();
      PX_UNUSED(nbVerts);

//std::cout<<"#\t[GetConvexMesh] nbPolys:"<< nbPolys <<" nbVerts:"<< nbVerts <<" \n"; 
for(int i=0; i<nbVerts; i++) 
{
  PxVec3 p = verts[i]; 
  vertices.push_back( {p.x,p.y,p.z} );  
}  

      PxU32 numTotalTriangles = 0;
      for(PxU32 i = 0; i < nbPolys; i++)
      {
        PxHullPolygon data;
        mesh->getPolygonData(i, data);

        const PxU32 nbTris = PxU32(data.mNbVerts - 2);
        const PxU32 vref0 = polygons[data.mIndexBase + 0];
        PX_ASSERT(vref0 < nbVerts);
        for(PxU32 j=0;j<nbTris;j++)
        {
          const PxU32 dummy = polygons[data.mIndexBase + 0];
          const PxU32 vref1 = polygons[data.mIndexBase + 0 + j + 1];
          const PxU32 vref2 = polygons[data.mIndexBase + 0 + j + 2];

faces.push_back( {dummy,vref1,vref2}); 

          //generate face normal:
          PxVec3 e0 = verts[vref1] - verts[vref0];
          PxVec3 e1 = verts[vref2] - verts[vref0];

          PX_ASSERT(vref1 < nbVerts);
          PX_ASSERT(vref2 < nbVerts);

          PxVec3 fnormal = e0.cross(e1);
          fnormal.normalize();

          if(numTotalTriangles*6 < MAX_NUM_MESH_VEC3S)
          {
            gVertexBuffer[numTotalTriangles*6 + 0] = fnormal;
            gVertexBuffer[numTotalTriangles*6 + 1] = verts[vref0];
            gVertexBuffer[numTotalTriangles*6 + 2] = fnormal;
            gVertexBuffer[numTotalTriangles*6 + 3] = verts[vref1];
            gVertexBuffer[numTotalTriangles*6 + 4] = fnormal;
            gVertexBuffer[numTotalTriangles*6 + 5] = verts[vref2];
            numTotalTriangles++;
          }
        }
      } 

  } // PxGeometryType::eCONVEXMESH
}


/*
static PX_FORCE_INLINE void renderGeometryHolder(const PxGeometryHolder& h)
{
  GetConvexMesh(h.any());
}
*/
/*
void RenderActor(PxRigidActor* actor) 
{
    PxShape* shapes[MAX_NUM_ACTOR_SHAPES];

    const PxU32 nbShapes = actor->getNbShapes();
    PX_ASSERT(nbShapes <= MAX_NUM_ACTOR_SHAPES);
    actor->getShapes(shapes, nbShapes);
    const bool sleeping = actor->is<PxRigidDynamic>() ? actor->is<PxRigidDynamic>()->isSleeping() : false;

    for(PxU32 j=0;j<nbShapes;j++)
    {
      const PxMat44 shapePose(PxShapeExt::getGlobalPose(*shapes[j], *actor));
      const PxGeometryHolder h = shapes[j]->getGeometry();

      if(sleeping){} 
//      renderGeometryHolder(h);

std::vector< std::vector<double> > vertices;  
std::vector< std::vector<double> > faces; 

GetConvexMesh( h.any(), vertices, faces);

faces.clear(); 
vertices.clear(); 

    }
}
*/



template<PxConvexMeshCookingType::Enum convexMeshCookingType, bool directInsertion, PxU32 gaussMapLimit>
PxConvexMesh* 
CreateRandomConvex(PxU32 numVerts, const PxVec3* verts, PxPhysics* physics, PxCooking* cooking)
{
	PxCookingParams params = cooking->getParams();

	// Use the new (default) PxConvexMeshCookingType::eQUICKHULL
	params.convexMeshCookingType = convexMeshCookingType;

	// If the gaussMapLimit is chosen higher than the number of output vertices, no gauss map is added to the convex mesh data (here 256).
	// If the gaussMapLimit is chosen lower than the number of output vertices, a gauss map is added to the convex mesh data (here 16).
	params.gaussMapLimit = gaussMapLimit;
	cooking->setParams(params);

	// Setup the convex mesh descriptor
	PxConvexMeshDesc desc;

	// We provide points only, therefore the PxConvexFlag::eCOMPUTE_CONVEX flag must be specified
	desc.points.data = verts;
	desc.points.count = numVerts;
	desc.points.stride = sizeof(PxVec3);
	desc.flags = PxConvexFlag::eCOMPUTE_CONVEX;

	PxU32 meshSize = 0;
	PxConvexMesh* convex = NULL;

	if(directInsertion)
	{
		// Directly insert mesh into PhysX
		convex = cooking->createConvexMesh(desc, physics->getPhysicsInsertionCallback());
		PX_ASSERT(convex);
	}
	else
	{
		// Serialize the cooked mesh into a stream.
		PxDefaultMemoryOutputStream outStream;
		bool res = cooking->cookConvexMesh(desc, outStream);
		PX_UNUSED(res);
		PX_ASSERT(res);
		meshSize = outStream.getSize();

		// Create the mesh from a stream.
		PxDefaultMemoryInputData inStream(outStream.getData(), outStream.getSize());
		convex = physics->createConvexMesh(inStream);
		PX_ASSERT(convex);
	}
/*
	// Print the elapsed time for comparison
	printf("#\t -----------------------------------------------\n");
	printf("#\t Create convex mesh with %d triangles: \n", numVerts);
	directInsertion ? printf("#\t\t Direct mesh insertion enabled\n") : printf("#\t\t Direct mesh insertion disabled\n");
	printf("#\t\t Gauss map limit: %d \n", gaussMapLimit);
	printf("#\t\t Created hull number of vertices: %d \n", convex->getNbVertices());
	printf("#\t\t Created hull number of polygons: %d \n", convex->getNbPolygons());
	if (!directInsertion)
	{
		printf("#\t Mesh size: %d \n", meshSize);
	}
*/
	//convex->release();
  return convex; 
}


PxConvexMesh*
createRandomConvexMeshes(PxPhysics* physics, PxCooking* cooking)
{
	const PxU32 numVerts = 64;
	PxVec3* vertices = new PxVec3[numVerts];

	// Prepare random verts
	for(PxU32 i = 0; i < numVerts; i++)
	{
		vertices[i] = PxVec3(rand(-2.0f,2.0f), rand(-2.0f,2.0f), rand(-2.0f,2.0f));
	}

	// Convex mesh creation inserting the mesh directly into PhysX. 
	// Useful for runtime cooking.
	PxConvexMesh* convex = CreateRandomConvex<PxConvexMeshCookingType::eQUICKHULL, true, 16>(numVerts, vertices, physics, cooking);

	delete [] vertices;

  return convex; 
}



static PxConvexMesh* createConvexMesh(const PxVec3* verts, const PxU32 numVerts, PxPhysics *physics, PxCooking *cooking)
{
  // Create descriptor for convex mesh
  PxConvexMeshDesc convexDesc;
  convexDesc.points.count     = numVerts;
  convexDesc.points.stride    = sizeof(PxVec3);
  convexDesc.points.data      = verts;
  convexDesc.flags        = PxConvexFlag::eCOMPUTE_CONVEX;

  PxConvexMesh* convexMesh = NULL;
  PxDefaultMemoryOutputStream buf;
  if(cooking->cookConvexMesh(convexDesc, buf))
  {
    PxDefaultMemoryInputData id(buf.getData(), buf.getSize());
    convexMesh = physics->createConvexMesh(id);
  }

  return convexMesh;
}


PxConvexMesh* createWheelMesh(const PxF32 width, const PxF32 radius, PxPhysics *physics, PxCooking *cooking)
{
  PxVec3 points[2*16];
  for(PxU32 i = 0; i < 16; i++)
  {
    const PxF32 cosTheta = PxCos(i*PxPi*2.0f/16.0f);
    const PxF32 sinTheta = PxSin(i*PxPi*2.0f/16.0f);
    const PxF32 y = radius*cosTheta;
    const PxF32 z = radius*sinTheta;
    points[2*i+0] = PxVec3(-width/2.0f, y, z);
    points[2*i+1] = PxVec3(+width/2.0f, y, z);
  }

  return createConvexMesh(points,32,physics,cooking);
}



PxConvexMesh* createChassisMesh(const PxVec3 dims, PxPhysics *physics, PxCooking *cooking)
{
  const PxF32 x = dims.x*0.5f;
  const PxF32 y = dims.y*0.5f;
  const PxF32 z = dims.z*0.5f;
  PxVec3 verts[8] =
  {
    PxVec3(x,y,-z),
    PxVec3(x,y,z),
    PxVec3(x,-y,z),
    PxVec3(x,-y,-z),
    PxVec3(-x,y,-z),
    PxVec3(-x,y,z),
    PxVec3(-x,-y,z),
    PxVec3(-x,-y,-z)
  };

  return createConvexMesh(verts,8,physics,cooking);
}

/*
PxConvexMesh* createTruncatedCubeMesh(PxPhysics *physics, PxCooking *cooking)
{
  std::vector<PxVec3> verts={PxVec3(0,0,1.042011),PxVec3(0.5621693,0,0.8773552),PxVec3(-0.4798415,0.2928932,0.8773552),PxVec3(0.2569714,-0.5,0.8773552),PxVec3(0.8773552,0.2928932,0.4798415),PxVec3(-0.9014684,0.2071068,0.4798415),PxVec3(-0.5962706,0.7071068,0.4798415),PxVec3(0.1405423,-0.9142136,0.4798415),PxVec3(1.017898,0.2071068,-0.08232778),PxVec3(0.7609261,0.7071068,0.08232778),PxVec3(-1.017898,-0.2071068,0.08232778),PxVec3(-0.2810846,1,0.08232778),PxVec3(-0.2810846,-1,0.08232778),PxVec3(0.2810846,-1,-0.08232778),PxVec3(0.9014684,-0.2071068,-0.4798415),PxVec3(0.2810846,1,-0.08232778),PxVec3(-0.7609261,-0.7071068,-0.08232778),PxVec3(-0.8773552,-0.2928932,-0.4798415),PxVec3(-0.1405423,0.9142136,-0.4798415),PxVec3(0.5962706,-0.7071068,-0.4798415),PxVec3(0.4798415,-0.2928932,-0.8773552),PxVec3(-0.5621693,0,-0.8773552),PxVec3(-0.2569714,0.5,-0.8773552),PxVec3(0,0,-1.042011)};
  return createConvexMesh(verts.data(),verts.size(),physics,cooking);
}
*/

PxConvexMesh* createPlaneMesh(PxPhysics *physics, PxCooking *cooking)
{
  std::vector<PxVec3> verts;

  // 40x40 ; 16 x 16 cells
  //verts={PxVec3(-10.0,-1.110223e-15,-10.0),PxVec3(0.0,0.0,-10.0),PxVec3(10.0,1.110223e-15,-10.0),PxVec3(-10.0,-1.110223e-15,0.0),PxVec3(0.0,0.0,0.0),PxVec3(10.0,1.110223e-15,0.0),PxVec3(-10.0,-1.110223e-15,10.0),PxVec3(0.0,0.0,10.0),PxVec3(10.0,1.110223e-15,10.0)};

  //
verts={PxVec3(-100.0,-1.110223e-14,-100.0),PxVec3(-93.75,-1.0408341e-14,-100.0),PxVec3(-87.5,-9.7144515e-15,-100.0),PxVec3(-81.25,-9.020562e-15,-100.0),PxVec3(-75.0,-8.326673e-15,-100.0),PxVec3(-68.75,-7.632783e-15,-100.0),PxVec3(-62.5,-6.938894e-15,-100.0),PxVec3(-56.25,-6.2450045e-15,-100.0),PxVec3(-50.0,-5.551115e-15,-100.0),PxVec3(-43.75,-4.8572257e-15,-100.0),PxVec3(-37.5,-4.1633363e-15,-100.0),PxVec3(-31.25,-3.469447e-15,-100.0),PxVec3(-25.0,-2.7755576e-15,-100.0),PxVec3(-18.75,-2.0816682e-15,-100.0),PxVec3(-12.5,-1.3877788e-15,-100.0),PxVec3(-6.25,-6.938894e-16,-100.0),PxVec3(0.0,0.0,-100.0),PxVec3(6.25,6.938894e-16,-100.0),PxVec3(12.5,1.3877788e-15,-100.0),PxVec3(18.75,2.0816682e-15,-100.0),PxVec3(25.0,2.7755576e-15,-100.0),PxVec3(31.25,3.469447e-15,-100.0),PxVec3(37.5,4.1633363e-15,-100.0),PxVec3(43.75,4.8572257e-15,-100.0),PxVec3(50.0,5.551115e-15,-100.0),PxVec3(56.25,6.2450045e-15,-100.0),PxVec3(62.5,6.938894e-15,-100.0),PxVec3(68.75,7.632783e-15,-100.0),PxVec3(75.0,8.326673e-15,-100.0),PxVec3(81.25,9.020562e-15,-100.0),PxVec3(87.5,9.7144515e-15,-100.0),PxVec3(93.75,1.0408341e-14,-100.0),PxVec3(100.0,1.110223e-14,-100.0),PxVec3(-100.0,-1.110223e-14,-93.75),PxVec3(-93.75,-1.0408341e-14,-93.75),PxVec3(-87.5,-9.7144515e-15,-93.75),PxVec3(-81.25,-9.020562e-15,-93.75),PxVec3(-75.0,-8.326673e-15,-93.75),PxVec3(-68.75,-7.632783e-15,-93.75),PxVec3(-62.5,-6.938894e-15,-93.75),PxVec3(-56.25,-6.2450045e-15,-93.75),PxVec3(-50.0,-5.551115e-15,-93.75),PxVec3(-43.75,-4.8572257e-15,-93.75),PxVec3(-37.5,-4.1633363e-15,-93.75),PxVec3(-31.25,-3.469447e-15,-93.75),PxVec3(-25.0,-2.7755576e-15,-93.75),PxVec3(-18.75,-2.0816682e-15,-93.75),PxVec3(-12.5,-1.3877788e-15,-93.75),PxVec3(-6.25,-6.938894e-16,-93.75),PxVec3(0.0,0.0,-93.75),PxVec3(6.25,6.938894e-16,-93.75),PxVec3(12.5,1.3877788e-15,-93.75),PxVec3(18.75,2.0816682e-15,-93.75),PxVec3(25.0,2.7755576e-15,-93.75),PxVec3(31.25,3.469447e-15,-93.75),PxVec3(37.5,4.1633363e-15,-93.75),PxVec3(43.75,4.8572257e-15,-93.75),PxVec3(50.0,5.551115e-15,-93.75),PxVec3(56.25,6.2450045e-15,-93.75),PxVec3(62.5,6.938894e-15,-93.75),PxVec3(68.75,7.632783e-15,-93.75),PxVec3(75.0,8.326673e-15,-93.75),PxVec3(81.25,9.020562e-15,-93.75),PxVec3(87.5,9.7144515e-15,-93.75),PxVec3(93.75,1.0408341e-14,-93.75),PxVec3(100.0,1.110223e-14,-93.75),PxVec3(-100.0,-1.110223e-14,-87.5),PxVec3(-93.75,-1.0408341e-14,-87.5),PxVec3(-87.5,-9.7144515e-15,-87.5),PxVec3(-81.25,-9.020562e-15,-87.5),PxVec3(-75.0,-8.326673e-15,-87.5),PxVec3(-68.75,-7.632783e-15,-87.5),PxVec3(-62.5,-6.938894e-15,-87.5),PxVec3(-56.25,-6.2450045e-15,-87.5),PxVec3(-50.0,-5.551115e-15,-87.5),PxVec3(-43.75,-4.8572257e-15,-87.5),PxVec3(-37.5,-4.1633363e-15,-87.5),PxVec3(-31.25,-3.469447e-15,-87.5),PxVec3(-25.0,-2.7755576e-15,-87.5),PxVec3(-18.75,-2.0816682e-15,-87.5),PxVec3(-12.5,-1.3877788e-15,-87.5),PxVec3(-6.25,-6.938894e-16,-87.5),PxVec3(0.0,0.0,-87.5),PxVec3(6.25,6.938894e-16,-87.5),PxVec3(12.5,1.3877788e-15,-87.5),PxVec3(18.75,2.0816682e-15,-87.5),PxVec3(25.0,2.7755576e-15,-87.5),PxVec3(31.25,3.469447e-15,-87.5),PxVec3(37.5,4.1633363e-15,-87.5),PxVec3(43.75,4.8572257e-15,-87.5),PxVec3(50.0,5.551115e-15,-87.5),PxVec3(56.25,6.2450045e-15,-87.5),PxVec3(62.5,6.938894e-15,-87.5),PxVec3(68.75,7.632783e-15,-87.5),PxVec3(75.0,8.326673e-15,-87.5),PxVec3(81.25,9.020562e-15,-87.5),PxVec3(87.5,9.7144515e-15,-87.5),PxVec3(93.75,1.0408341e-14,-87.5),PxVec3(100.0,1.110223e-14,-87.5),PxVec3(-100.0,-1.110223e-14,-81.25),PxVec3(-93.75,-1.0408341e-14,-81.25),PxVec3(-87.5,-9.7144515e-15,-81.25),PxVec3(-81.25,-9.020562e-15,-81.25),PxVec3(-75.0,-8.326673e-15,-81.25),PxVec3(-68.75,-7.632783e-15,-81.25),PxVec3(-62.5,-6.938894e-15,-81.25),PxVec3(-56.25,-6.2450045e-15,-81.25),PxVec3(-50.0,-5.551115e-15,-81.25),PxVec3(-43.75,-4.8572257e-15,-81.25),PxVec3(-37.5,-4.1633363e-15,-81.25),PxVec3(-31.25,-3.469447e-15,-81.25),PxVec3(-25.0,-2.7755576e-15,-81.25),PxVec3(-18.75,-2.0816682e-15,-81.25),PxVec3(-12.5,-1.3877788e-15,-81.25),PxVec3(-6.25,-6.938894e-16,-81.25),PxVec3(0.0,0.0,-81.25),PxVec3(6.25,6.938894e-16,-81.25),PxVec3(12.5,1.3877788e-15,-81.25),PxVec3(18.75,2.0816682e-15,-81.25),PxVec3(25.0,2.7755576e-15,-81.25),PxVec3(31.25,3.469447e-15,-81.25),PxVec3(37.5,4.1633363e-15,-81.25),PxVec3(43.75,4.8572257e-15,-81.25),PxVec3(50.0,5.551115e-15,-81.25),PxVec3(56.25,6.2450045e-15,-81.25),PxVec3(62.5,6.938894e-15,-81.25),PxVec3(68.75,7.632783e-15,-81.25),PxVec3(75.0,8.326673e-15,-81.25),PxVec3(81.25,9.020562e-15,-81.25),PxVec3(87.5,9.7144515e-15,-81.25),PxVec3(93.75,1.0408341e-14,-81.25),PxVec3(100.0,1.110223e-14,-81.25),PxVec3(-100.0,-1.110223e-14,-75.0),PxVec3(-93.75,-1.0408341e-14,-75.0),PxVec3(-87.5,-9.7144515e-15,-75.0),PxVec3(-81.25,-9.020562e-15,-75.0),PxVec3(-75.0,-8.326673e-15,-75.0),PxVec3(-68.75,-7.632783e-15,-75.0),PxVec3(-62.5,-6.938894e-15,-75.0),PxVec3(-56.25,-6.2450045e-15,-75.0),PxVec3(-50.0,-5.551115e-15,-75.0),PxVec3(-43.75,-4.8572257e-15,-75.0),PxVec3(-37.5,-4.1633363e-15,-75.0),PxVec3(-31.25,-3.469447e-15,-75.0),PxVec3(-25.0,-2.7755576e-15,-75.0),PxVec3(-18.75,-2.0816682e-15,-75.0),PxVec3(-12.5,-1.3877788e-15,-75.0),PxVec3(-6.25,-6.938894e-16,-75.0),PxVec3(0.0,0.0,-75.0),PxVec3(6.25,6.938894e-16,-75.0),PxVec3(12.5,1.3877788e-15,-75.0),PxVec3(18.75,2.0816682e-15,-75.0),PxVec3(25.0,2.7755576e-15,-75.0),PxVec3(31.25,3.469447e-15,-75.0),PxVec3(37.5,4.1633363e-15,-75.0),PxVec3(43.75,4.8572257e-15,-75.0),PxVec3(50.0,5.551115e-15,-75.0),PxVec3(56.25,6.2450045e-15,-75.0),PxVec3(62.5,6.938894e-15,-75.0),PxVec3(68.75,7.632783e-15,-75.0),PxVec3(75.0,8.326673e-15,-75.0),PxVec3(81.25,9.020562e-15,-75.0),PxVec3(87.5,9.7144515e-15,-75.0),PxVec3(93.75,1.0408341e-14,-75.0),PxVec3(100.0,1.110223e-14,-75.0),PxVec3(-100.0,-1.110223e-14,-68.75),PxVec3(-93.75,-1.0408341e-14,-68.75),PxVec3(-87.5,-9.7144515e-15,-68.75),PxVec3(-81.25,-9.020562e-15,-68.75),PxVec3(-75.0,-8.326673e-15,-68.75),PxVec3(-68.75,-7.632783e-15,-68.75),PxVec3(-62.5,-6.938894e-15,-68.75),PxVec3(-56.25,-6.2450045e-15,-68.75),PxVec3(-50.0,-5.551115e-15,-68.75),PxVec3(-43.75,-4.8572257e-15,-68.75),PxVec3(-37.5,-4.1633363e-15,-68.75),PxVec3(-31.25,-3.469447e-15,-68.75),PxVec3(-25.0,-2.7755576e-15,-68.75),PxVec3(-18.75,-2.0816682e-15,-68.75),PxVec3(-12.5,-1.3877788e-15,-68.75),PxVec3(-6.25,-6.938894e-16,-68.75),PxVec3(0.0,0.0,-68.75),PxVec3(6.25,6.938894e-16,-68.75),PxVec3(12.5,1.3877788e-15,-68.75),PxVec3(18.75,2.0816682e-15,-68.75),PxVec3(25.0,2.7755576e-15,-68.75),PxVec3(31.25,3.469447e-15,-68.75),PxVec3(37.5,4.1633363e-15,-68.75),PxVec3(43.75,4.8572257e-15,-68.75),PxVec3(50.0,5.551115e-15,-68.75),PxVec3(56.25,6.2450045e-15,-68.75),PxVec3(62.5,6.938894e-15,-68.75),PxVec3(68.75,7.632783e-15,-68.75),PxVec3(75.0,8.326673e-15,-68.75),PxVec3(81.25,9.020562e-15,-68.75),PxVec3(87.5,9.7144515e-15,-68.75),PxVec3(93.75,1.0408341e-14,-68.75),PxVec3(100.0,1.110223e-14,-68.75),PxVec3(-100.0,-1.110223e-14,-62.5),PxVec3(-93.75,-1.0408341e-14,-62.5),PxVec3(-87.5,-9.7144515e-15,-62.5),PxVec3(-81.25,-9.020562e-15,-62.5),PxVec3(-75.0,-8.326673e-15,-62.5),PxVec3(-68.75,-7.632783e-15,-62.5),PxVec3(-62.5,-6.938894e-15,-62.5),PxVec3(-56.25,-6.2450045e-15,-62.5),PxVec3(-50.0,-5.551115e-15,-62.5),PxVec3(-43.75,-4.8572257e-15,-62.5),PxVec3(-37.5,-4.1633363e-15,-62.5),PxVec3(-31.25,-3.469447e-15,-62.5),PxVec3(-25.0,-2.7755576e-15,-62.5),PxVec3(-18.75,-2.0816682e-15,-62.5),PxVec3(-12.5,-1.3877788e-15,-62.5),PxVec3(-6.25,-6.938894e-16,-62.5),PxVec3(0.0,0.0,-62.5),PxVec3(6.25,6.938894e-16,-62.5),PxVec3(12.5,1.3877788e-15,-62.5),PxVec3(18.75,2.0816682e-15,-62.5),PxVec3(25.0,2.7755576e-15,-62.5),PxVec3(31.25,3.469447e-15,-62.5),PxVec3(37.5,4.1633363e-15,-62.5),PxVec3(43.75,4.8572257e-15,-62.5),PxVec3(50.0,5.551115e-15,-62.5),PxVec3(56.25,6.2450045e-15,-62.5),PxVec3(62.5,6.938894e-15,-62.5),PxVec3(68.75,7.632783e-15,-62.5),PxVec3(75.0,8.326673e-15,-62.5),PxVec3(81.25,9.020562e-15,-62.5),PxVec3(87.5,9.7144515e-15,-62.5),PxVec3(93.75,1.0408341e-14,-62.5),PxVec3(100.0,1.110223e-14,-62.5),PxVec3(-100.0,-1.110223e-14,-56.25),PxVec3(-93.75,-1.0408341e-14,-56.25),PxVec3(-87.5,-9.7144515e-15,-56.25),PxVec3(-81.25,-9.020562e-15,-56.25),PxVec3(-75.0,-8.326673e-15,-56.25),PxVec3(-68.75,-7.632783e-15,-56.25),PxVec3(-62.5,-6.938894e-15,-56.25),PxVec3(-56.25,-6.2450045e-15,-56.25),PxVec3(-50.0,-5.551115e-15,-56.25),PxVec3(-43.75,-4.8572257e-15,-56.25),PxVec3(-37.5,-4.1633363e-15,-56.25),PxVec3(-31.25,-3.469447e-15,-56.25),PxVec3(-25.0,-2.7755576e-15,-56.25),PxVec3(-18.75,-2.0816682e-15,-56.25),PxVec3(-12.5,-1.3877788e-15,-56.25),PxVec3(-6.25,-6.938894e-16,-56.25),PxVec3(0.0,0.0,-56.25),PxVec3(6.25,6.938894e-16,-56.25),PxVec3(12.5,1.3877788e-15,-56.25),PxVec3(18.75,2.0816682e-15,-56.25),PxVec3(25.0,2.7755576e-15,-56.25),PxVec3(31.25,3.469447e-15,-56.25),PxVec3(37.5,4.1633363e-15,-56.25),PxVec3(43.75,4.8572257e-15,-56.25),PxVec3(50.0,5.551115e-15,-56.25),PxVec3(56.25,6.2450045e-15,-56.25),PxVec3(62.5,6.938894e-15,-56.25),PxVec3(68.75,7.632783e-15,-56.25),PxVec3(75.0,8.326673e-15,-56.25),PxVec3(81.25,9.020562e-15,-56.25),PxVec3(87.5,9.7144515e-15,-56.25),PxVec3(93.75,1.0408341e-14,-56.25),PxVec3(100.0,1.110223e-14,-56.25),PxVec3(-100.0,-1.110223e-14,-50.0),PxVec3(-93.75,-1.0408341e-14,-50.0),PxVec3(-87.5,-9.7144515e-15,-50.0),PxVec3(-81.25,-9.020562e-15,-50.0),PxVec3(-75.0,-8.326673e-15,-50.0),PxVec3(-68.75,-7.632783e-15,-50.0),PxVec3(-62.5,-6.938894e-15,-50.0),PxVec3(-56.25,-6.2450045e-15,-50.0),PxVec3(-50.0,-5.551115e-15,-50.0),PxVec3(-43.75,-4.8572257e-15,-50.0),PxVec3(-37.5,-4.1633363e-15,-50.0),PxVec3(-31.25,-3.469447e-15,-50.0),PxVec3(-25.0,-2.7755576e-15,-50.0),PxVec3(-18.75,-2.0816682e-15,-50.0),PxVec3(-12.5,-1.3877788e-15,-50.0),PxVec3(-6.25,-6.938894e-16,-50.0),PxVec3(0.0,0.0,-50.0),PxVec3(6.25,6.938894e-16,-50.0),PxVec3(12.5,1.3877788e-15,-50.0),PxVec3(18.75,2.0816682e-15,-50.0),PxVec3(25.0,2.7755576e-15,-50.0),PxVec3(31.25,3.469447e-15,-50.0),PxVec3(37.5,4.1633363e-15,-50.0),PxVec3(43.75,4.8572257e-15,-50.0),PxVec3(50.0,5.551115e-15,-50.0),PxVec3(56.25,6.2450045e-15,-50.0),PxVec3(62.5,6.938894e-15,-50.0),PxVec3(68.75,7.632783e-15,-50.0),PxVec3(75.0,8.326673e-15,-50.0),PxVec3(81.25,9.020562e-15,-50.0),PxVec3(87.5,9.7144515e-15,-50.0),PxVec3(93.75,1.0408341e-14,-50.0),PxVec3(100.0,1.110223e-14,-50.0),PxVec3(-100.0,-1.110223e-14,-43.75),PxVec3(-93.75,-1.0408341e-14,-43.75),PxVec3(-87.5,-9.7144515e-15,-43.75),PxVec3(-81.25,-9.020562e-15,-43.75),PxVec3(-75.0,-8.326673e-15,-43.75),PxVec3(-68.75,-7.632783e-15,-43.75),PxVec3(-62.5,-6.938894e-15,-43.75),PxVec3(-56.25,-6.2450045e-15,-43.75),PxVec3(-50.0,-5.551115e-15,-43.75),PxVec3(-43.75,-4.8572257e-15,-43.75),PxVec3(-37.5,-4.1633363e-15,-43.75),PxVec3(-31.25,-3.469447e-15,-43.75),PxVec3(-25.0,-2.7755576e-15,-43.75),PxVec3(-18.75,-2.0816682e-15,-43.75),PxVec3(-12.5,-1.3877788e-15,-43.75),PxVec3(-6.25,-6.938894e-16,-43.75),PxVec3(0.0,0.0,-43.75),PxVec3(6.25,6.938894e-16,-43.75),PxVec3(12.5,1.3877788e-15,-43.75),PxVec3(18.75,2.0816682e-15,-43.75),PxVec3(25.0,2.7755576e-15,-43.75),PxVec3(31.25,3.469447e-15,-43.75),PxVec3(37.5,4.1633363e-15,-43.75),PxVec3(43.75,4.8572257e-15,-43.75),PxVec3(50.0,5.551115e-15,-43.75),PxVec3(56.25,6.2450045e-15,-43.75),PxVec3(62.5,6.938894e-15,-43.75),PxVec3(68.75,7.632783e-15,-43.75),PxVec3(75.0,8.326673e-15,-43.75),PxVec3(81.25,9.020562e-15,-43.75),PxVec3(87.5,9.7144515e-15,-43.75),PxVec3(93.75,1.0408341e-14,-43.75),PxVec3(100.0,1.110223e-14,-43.75),PxVec3(-100.0,-1.110223e-14,-37.5),PxVec3(-93.75,-1.0408341e-14,-37.5),PxVec3(-87.5,-9.7144515e-15,-37.5),PxVec3(-81.25,-9.020562e-15,-37.5),PxVec3(-75.0,-8.326673e-15,-37.5),PxVec3(-68.75,-7.632783e-15,-37.5),PxVec3(-62.5,-6.938894e-15,-37.5),PxVec3(-56.25,-6.2450045e-15,-37.5),PxVec3(-50.0,-5.551115e-15,-37.5),PxVec3(-43.75,-4.8572257e-15,-37.5),PxVec3(-37.5,-4.1633363e-15,-37.5),PxVec3(-31.25,-3.469447e-15,-37.5),PxVec3(-25.0,-2.7755576e-15,-37.5),PxVec3(-18.75,-2.0816682e-15,-37.5),PxVec3(-12.5,-1.3877788e-15,-37.5),PxVec3(-6.25,-6.938894e-16,-37.5),PxVec3(0.0,0.0,-37.5),PxVec3(6.25,6.938894e-16,-37.5),PxVec3(12.5,1.3877788e-15,-37.5),PxVec3(18.75,2.0816682e-15,-37.5),PxVec3(25.0,2.7755576e-15,-37.5),PxVec3(31.25,3.469447e-15,-37.5),PxVec3(37.5,4.1633363e-15,-37.5),PxVec3(43.75,4.8572257e-15,-37.5),PxVec3(50.0,5.551115e-15,-37.5),PxVec3(56.25,6.2450045e-15,-37.5),PxVec3(62.5,6.938894e-15,-37.5),PxVec3(68.75,7.632783e-15,-37.5),PxVec3(75.0,8.326673e-15,-37.5),PxVec3(81.25,9.020562e-15,-37.5),PxVec3(87.5,9.7144515e-15,-37.5),PxVec3(93.75,1.0408341e-14,-37.5),PxVec3(100.0,1.110223e-14,-37.5),PxVec3(-100.0,-1.110223e-14,-31.25),PxVec3(-93.75,-1.0408341e-14,-31.25),PxVec3(-87.5,-9.7144515e-15,-31.25),PxVec3(-81.25,-9.020562e-15,-31.25),PxVec3(-75.0,-8.326673e-15,-31.25),PxVec3(-68.75,-7.632783e-15,-31.25),PxVec3(-62.5,-6.938894e-15,-31.25),PxVec3(-56.25,-6.2450045e-15,-31.25),PxVec3(-50.0,-5.551115e-15,-31.25),PxVec3(-43.75,-4.8572257e-15,-31.25),PxVec3(-37.5,-4.1633363e-15,-31.25),PxVec3(-31.25,-3.469447e-15,-31.25),PxVec3(-25.0,-2.7755576e-15,-31.25),PxVec3(-18.75,-2.0816682e-15,-31.25),PxVec3(-12.5,-1.3877788e-15,-31.25),PxVec3(-6.25,-6.938894e-16,-31.25),PxVec3(0.0,0.0,-31.25),PxVec3(6.25,6.938894e-16,-31.25),PxVec3(12.5,1.3877788e-15,-31.25),PxVec3(18.75,2.0816682e-15,-31.25),PxVec3(25.0,2.7755576e-15,-31.25),PxVec3(31.25,3.469447e-15,-31.25),PxVec3(37.5,4.1633363e-15,-31.25),PxVec3(43.75,4.8572257e-15,-31.25),PxVec3(50.0,5.551115e-15,-31.25),PxVec3(56.25,6.2450045e-15,-31.25),PxVec3(62.5,6.938894e-15,-31.25),PxVec3(68.75,7.632783e-15,-31.25),PxVec3(75.0,8.326673e-15,-31.25),PxVec3(81.25,9.020562e-15,-31.25),PxVec3(87.5,9.7144515e-15,-31.25),PxVec3(93.75,1.0408341e-14,-31.25),PxVec3(100.0,1.110223e-14,-31.25),PxVec3(-100.0,-1.110223e-14,-25.0),PxVec3(-93.75,-1.0408341e-14,-25.0),PxVec3(-87.5,-9.7144515e-15,-25.0),PxVec3(-81.25,-9.020562e-15,-25.0),PxVec3(-75.0,-8.326673e-15,-25.0),PxVec3(-68.75,-7.632783e-15,-25.0),PxVec3(-62.5,-6.938894e-15,-25.0),PxVec3(-56.25,-6.2450045e-15,-25.0),PxVec3(-50.0,-5.551115e-15,-25.0),PxVec3(-43.75,-4.8572257e-15,-25.0),PxVec3(-37.5,-4.1633363e-15,-25.0),PxVec3(-31.25,-3.469447e-15,-25.0),PxVec3(-25.0,-2.7755576e-15,-25.0),PxVec3(-18.75,-2.0816682e-15,-25.0),PxVec3(-12.5,-1.3877788e-15,-25.0),PxVec3(-6.25,-6.938894e-16,-25.0),PxVec3(0.0,0.0,-25.0),PxVec3(6.25,6.938894e-16,-25.0),PxVec3(12.5,1.3877788e-15,-25.0),PxVec3(18.75,2.0816682e-15,-25.0),PxVec3(25.0,2.7755576e-15,-25.0),PxVec3(31.25,3.469447e-15,-25.0),PxVec3(37.5,4.1633363e-15,-25.0),PxVec3(43.75,4.8572257e-15,-25.0),PxVec3(50.0,5.551115e-15,-25.0),PxVec3(56.25,6.2450045e-15,-25.0),PxVec3(62.5,6.938894e-15,-25.0),PxVec3(68.75,7.632783e-15,-25.0),PxVec3(75.0,8.326673e-15,-25.0),PxVec3(81.25,9.020562e-15,-25.0),PxVec3(87.5,9.7144515e-15,-25.0),PxVec3(93.75,1.0408341e-14,-25.0),PxVec3(100.0,1.110223e-14,-25.0),PxVec3(-100.0,-1.110223e-14,-18.75),PxVec3(-93.75,-1.0408341e-14,-18.75),PxVec3(-87.5,-9.7144515e-15,-18.75),PxVec3(-81.25,-9.020562e-15,-18.75),PxVec3(-75.0,-8.326673e-15,-18.75),PxVec3(-68.75,-7.632783e-15,-18.75),PxVec3(-62.5,-6.938894e-15,-18.75),PxVec3(-56.25,-6.2450045e-15,-18.75),PxVec3(-50.0,-5.551115e-15,-18.75),PxVec3(-43.75,-4.8572257e-15,-18.75),PxVec3(-37.5,-4.1633363e-15,-18.75),PxVec3(-31.25,-3.469447e-15,-18.75),PxVec3(-25.0,-2.7755576e-15,-18.75),PxVec3(-18.75,-2.0816682e-15,-18.75),PxVec3(-12.5,-1.3877788e-15,-18.75),PxVec3(-6.25,-6.938894e-16,-18.75),PxVec3(0.0,0.0,-18.75),PxVec3(6.25,6.938894e-16,-18.75),PxVec3(12.5,1.3877788e-15,-18.75),PxVec3(18.75,2.0816682e-15,-18.75),PxVec3(25.0,2.7755576e-15,-18.75),PxVec3(31.25,3.469447e-15,-18.75),PxVec3(37.5,4.1633363e-15,-18.75),PxVec3(43.75,4.8572257e-15,-18.75),PxVec3(50.0,5.551115e-15,-18.75),PxVec3(56.25,6.2450045e-15,-18.75),PxVec3(62.5,6.938894e-15,-18.75),PxVec3(68.75,7.632783e-15,-18.75),PxVec3(75.0,8.326673e-15,-18.75),PxVec3(81.25,9.020562e-15,-18.75),PxVec3(87.5,9.7144515e-15,-18.75),PxVec3(93.75,1.0408341e-14,-18.75),PxVec3(100.0,1.110223e-14,-18.75),PxVec3(-100.0,-1.110223e-14,-12.5),PxVec3(-93.75,-1.0408341e-14,-12.5),PxVec3(-87.5,-9.7144515e-15,-12.5),PxVec3(-81.25,-9.020562e-15,-12.5),PxVec3(-75.0,-8.326673e-15,-12.5),PxVec3(-68.75,-7.632783e-15,-12.5),PxVec3(-62.5,-6.938894e-15,-12.5),PxVec3(-56.25,-6.2450045e-15,-12.5),PxVec3(-50.0,-5.551115e-15,-12.5),PxVec3(-43.75,-4.8572257e-15,-12.5),PxVec3(-37.5,-4.1633363e-15,-12.5),PxVec3(-31.25,-3.469447e-15,-12.5),PxVec3(-25.0,-2.7755576e-15,-12.5),PxVec3(-18.75,-2.0816682e-15,-12.5),PxVec3(-12.5,-1.3877788e-15,-12.5),PxVec3(-6.25,-6.938894e-16,-12.5),PxVec3(0.0,0.0,-12.5),PxVec3(6.25,6.938894e-16,-12.5),PxVec3(12.5,1.3877788e-15,-12.5),PxVec3(18.75,2.0816682e-15,-12.5),PxVec3(25.0,2.7755576e-15,-12.5),PxVec3(31.25,3.469447e-15,-12.5),PxVec3(37.5,4.1633363e-15,-12.5),PxVec3(43.75,4.8572257e-15,-12.5),PxVec3(50.0,5.551115e-15,-12.5),PxVec3(56.25,6.2450045e-15,-12.5),PxVec3(62.5,6.938894e-15,-12.5),PxVec3(68.75,7.632783e-15,-12.5),PxVec3(75.0,8.326673e-15,-12.5),PxVec3(81.25,9.020562e-15,-12.5),PxVec3(87.5,9.7144515e-15,-12.5),PxVec3(93.75,1.0408341e-14,-12.5),PxVec3(100.0,1.110223e-14,-12.5),PxVec3(-100.0,-1.110223e-14,-6.25),PxVec3(-93.75,-1.0408341e-14,-6.25),PxVec3(-87.5,-9.7144515e-15,-6.25),PxVec3(-81.25,-9.020562e-15,-6.25),PxVec3(-75.0,-8.326673e-15,-6.25),PxVec3(-68.75,-7.632783e-15,-6.25),PxVec3(-62.5,-6.938894e-15,-6.25),PxVec3(-56.25,-6.2450045e-15,-6.25),PxVec3(-50.0,-5.551115e-15,-6.25),PxVec3(-43.75,-4.8572257e-15,-6.25),PxVec3(-37.5,-4.1633363e-15,-6.25),PxVec3(-31.25,-3.469447e-15,-6.25),PxVec3(-25.0,-2.7755576e-15,-6.25),PxVec3(-18.75,-2.0816682e-15,-6.25),PxVec3(-12.5,-1.3877788e-15,-6.25),PxVec3(-6.25,-6.938894e-16,-6.25),PxVec3(0.0,0.0,-6.25),PxVec3(6.25,6.938894e-16,-6.25),PxVec3(12.5,1.3877788e-15,-6.25),PxVec3(18.75,2.0816682e-15,-6.25),PxVec3(25.0,2.7755576e-15,-6.25),PxVec3(31.25,3.469447e-15,-6.25),PxVec3(37.5,4.1633363e-15,-6.25),PxVec3(43.75,4.8572257e-15,-6.25),PxVec3(50.0,5.551115e-15,-6.25),PxVec3(56.25,6.2450045e-15,-6.25),PxVec3(62.5,6.938894e-15,-6.25),PxVec3(68.75,7.632783e-15,-6.25),PxVec3(75.0,8.326673e-15,-6.25),PxVec3(81.25,9.020562e-15,-6.25),PxVec3(87.5,9.7144515e-15,-6.25),PxVec3(93.75,1.0408341e-14,-6.25),PxVec3(100.0,1.110223e-14,-6.25),PxVec3(-100.0,-1.110223e-14,0.0),PxVec3(-93.75,-1.0408341e-14,0.0),PxVec3(-87.5,-9.7144515e-15,0.0),PxVec3(-81.25,-9.020562e-15,0.0),PxVec3(-75.0,-8.326673e-15,0.0),PxVec3(-68.75,-7.632783e-15,0.0),PxVec3(-62.5,-6.938894e-15,0.0),PxVec3(-56.25,-6.2450045e-15,0.0),PxVec3(-50.0,-5.551115e-15,0.0),PxVec3(-43.75,-4.8572257e-15,0.0),PxVec3(-37.5,-4.1633363e-15,0.0),PxVec3(-31.25,-3.469447e-15,0.0),PxVec3(-25.0,-2.7755576e-15,0.0),PxVec3(-18.75,-2.0816682e-15,0.0),PxVec3(-12.5,-1.3877788e-15,0.0),PxVec3(-6.25,-6.938894e-16,0.0),PxVec3(0.0,0.0,0.0),PxVec3(6.25,6.938894e-16,0.0),PxVec3(12.5,1.3877788e-15,0.0),PxVec3(18.75,2.0816682e-15,0.0),PxVec3(25.0,2.7755576e-15,0.0),PxVec3(31.25,3.469447e-15,0.0),PxVec3(37.5,4.1633363e-15,0.0),PxVec3(43.75,4.8572257e-15,0.0),PxVec3(50.0,5.551115e-15,0.0),PxVec3(56.25,6.2450045e-15,0.0),PxVec3(62.5,6.938894e-15,0.0),PxVec3(68.75,7.632783e-15,0.0),PxVec3(75.0,8.326673e-15,0.0),PxVec3(81.25,9.020562e-15,0.0),PxVec3(87.5,9.7144515e-15,0.0),PxVec3(93.75,1.0408341e-14,0.0),PxVec3(100.0,1.110223e-14,0.0),PxVec3(-100.0,-1.110223e-14,6.25),PxVec3(-93.75,-1.0408341e-14,6.25),PxVec3(-87.5,-9.7144515e-15,6.25),PxVec3(-81.25,-9.020562e-15,6.25),PxVec3(-75.0,-8.326673e-15,6.25),PxVec3(-68.75,-7.632783e-15,6.25),PxVec3(-62.5,-6.938894e-15,6.25),PxVec3(-56.25,-6.2450045e-15,6.25),PxVec3(-50.0,-5.551115e-15,6.25),PxVec3(-43.75,-4.8572257e-15,6.25),PxVec3(-37.5,-4.1633363e-15,6.25),PxVec3(-31.25,-3.469447e-15,6.25),PxVec3(-25.0,-2.7755576e-15,6.25),PxVec3(-18.75,-2.0816682e-15,6.25),PxVec3(-12.5,-1.3877788e-15,6.25),PxVec3(-6.25,-6.938894e-16,6.25),PxVec3(0.0,0.0,6.25),PxVec3(6.25,6.938894e-16,6.25),PxVec3(12.5,1.3877788e-15,6.25),PxVec3(18.75,2.0816682e-15,6.25),PxVec3(25.0,2.7755576e-15,6.25),PxVec3(31.25,3.469447e-15,6.25),PxVec3(37.5,4.1633363e-15,6.25),PxVec3(43.75,4.8572257e-15,6.25),PxVec3(50.0,5.551115e-15,6.25),PxVec3(56.25,6.2450045e-15,6.25),PxVec3(62.5,6.938894e-15,6.25),PxVec3(68.75,7.632783e-15,6.25),PxVec3(75.0,8.326673e-15,6.25),PxVec3(81.25,9.020562e-15,6.25),PxVec3(87.5,9.7144515e-15,6.25),PxVec3(93.75,1.0408341e-14,6.25),PxVec3(100.0,1.110223e-14,6.25),PxVec3(-100.0,-1.110223e-14,12.5),PxVec3(-93.75,-1.0408341e-14,12.5),PxVec3(-87.5,-9.7144515e-15,12.5),PxVec3(-81.25,-9.020562e-15,12.5),PxVec3(-75.0,-8.326673e-15,12.5),PxVec3(-68.75,-7.632783e-15,12.5),PxVec3(-62.5,-6.938894e-15,12.5),PxVec3(-56.25,-6.2450045e-15,12.5),PxVec3(-50.0,-5.551115e-15,12.5),PxVec3(-43.75,-4.8572257e-15,12.5),PxVec3(-37.5,-4.1633363e-15,12.5),PxVec3(-31.25,-3.469447e-15,12.5),PxVec3(-25.0,-2.7755576e-15,12.5),PxVec3(-18.75,-2.0816682e-15,12.5),PxVec3(-12.5,-1.3877788e-15,12.5),PxVec3(-6.25,-6.938894e-16,12.5),PxVec3(0.0,0.0,12.5),PxVec3(6.25,6.938894e-16,12.5),PxVec3(12.5,1.3877788e-15,12.5),PxVec3(18.75,2.0816682e-15,12.5),PxVec3(25.0,2.7755576e-15,12.5),PxVec3(31.25,3.469447e-15,12.5),PxVec3(37.5,4.1633363e-15,12.5),PxVec3(43.75,4.8572257e-15,12.5),PxVec3(50.0,5.551115e-15,12.5),PxVec3(56.25,6.2450045e-15,12.5),PxVec3(62.5,6.938894e-15,12.5),PxVec3(68.75,7.632783e-15,12.5),PxVec3(75.0,8.326673e-15,12.5),PxVec3(81.25,9.020562e-15,12.5),PxVec3(87.5,9.7144515e-15,12.5),PxVec3(93.75,1.0408341e-14,12.5),PxVec3(100.0,1.110223e-14,12.5),PxVec3(-100.0,-1.110223e-14,18.75),PxVec3(-93.75,-1.0408341e-14,18.75),PxVec3(-87.5,-9.7144515e-15,18.75),PxVec3(-81.25,-9.020562e-15,18.75),PxVec3(-75.0,-8.326673e-15,18.75),PxVec3(-68.75,-7.632783e-15,18.75),PxVec3(-62.5,-6.938894e-15,18.75),PxVec3(-56.25,-6.2450045e-15,18.75),PxVec3(-50.0,-5.551115e-15,18.75),PxVec3(-43.75,-4.8572257e-15,18.75),PxVec3(-37.5,-4.1633363e-15,18.75),PxVec3(-31.25,-3.469447e-15,18.75),PxVec3(-25.0,-2.7755576e-15,18.75),PxVec3(-18.75,-2.0816682e-15,18.75),PxVec3(-12.5,-1.3877788e-15,18.75),PxVec3(-6.25,-6.938894e-16,18.75),PxVec3(0.0,0.0,18.75),PxVec3(6.25,6.938894e-16,18.75),PxVec3(12.5,1.3877788e-15,18.75),PxVec3(18.75,2.0816682e-15,18.75),PxVec3(25.0,2.7755576e-15,18.75),PxVec3(31.25,3.469447e-15,18.75),PxVec3(37.5,4.1633363e-15,18.75),PxVec3(43.75,4.8572257e-15,18.75),PxVec3(50.0,5.551115e-15,18.75),PxVec3(56.25,6.2450045e-15,18.75),PxVec3(62.5,6.938894e-15,18.75),PxVec3(68.75,7.632783e-15,18.75),PxVec3(75.0,8.326673e-15,18.75),PxVec3(81.25,9.020562e-15,18.75),PxVec3(87.5,9.7144515e-15,18.75),PxVec3(93.75,1.0408341e-14,18.75),PxVec3(100.0,1.110223e-14,18.75),PxVec3(-100.0,-1.110223e-14,25.0),PxVec3(-93.75,-1.0408341e-14,25.0),PxVec3(-87.5,-9.7144515e-15,25.0),PxVec3(-81.25,-9.020562e-15,25.0),PxVec3(-75.0,-8.326673e-15,25.0),PxVec3(-68.75,-7.632783e-15,25.0),PxVec3(-62.5,-6.938894e-15,25.0),PxVec3(-56.25,-6.2450045e-15,25.0),PxVec3(-50.0,-5.551115e-15,25.0),PxVec3(-43.75,-4.8572257e-15,25.0),PxVec3(-37.5,-4.1633363e-15,25.0),PxVec3(-31.25,-3.469447e-15,25.0),PxVec3(-25.0,-2.7755576e-15,25.0),PxVec3(-18.75,-2.0816682e-15,25.0),PxVec3(-12.5,-1.3877788e-15,25.0),PxVec3(-6.25,-6.938894e-16,25.0),PxVec3(0.0,0.0,25.0),PxVec3(6.25,6.938894e-16,25.0),PxVec3(12.5,1.3877788e-15,25.0),PxVec3(18.75,2.0816682e-15,25.0),PxVec3(25.0,2.7755576e-15,25.0),PxVec3(31.25,3.469447e-15,25.0),PxVec3(37.5,4.1633363e-15,25.0),PxVec3(43.75,4.8572257e-15,25.0),PxVec3(50.0,5.551115e-15,25.0),PxVec3(56.25,6.2450045e-15,25.0),PxVec3(62.5,6.938894e-15,25.0),PxVec3(68.75,7.632783e-15,25.0),PxVec3(75.0,8.326673e-15,25.0),PxVec3(81.25,9.020562e-15,25.0),PxVec3(87.5,9.7144515e-15,25.0),PxVec3(93.75,1.0408341e-14,25.0),PxVec3(100.0,1.110223e-14,25.0),PxVec3(-100.0,-1.110223e-14,31.25),PxVec3(-93.75,-1.0408341e-14,31.25),PxVec3(-87.5,-9.7144515e-15,31.25),PxVec3(-81.25,-9.020562e-15,31.25),PxVec3(-75.0,-8.326673e-15,31.25),PxVec3(-68.75,-7.632783e-15,31.25),PxVec3(-62.5,-6.938894e-15,31.25),PxVec3(-56.25,-6.2450045e-15,31.25),PxVec3(-50.0,-5.551115e-15,31.25),PxVec3(-43.75,-4.8572257e-15,31.25),PxVec3(-37.5,-4.1633363e-15,31.25),PxVec3(-31.25,-3.469447e-15,31.25),PxVec3(-25.0,-2.7755576e-15,31.25),PxVec3(-18.75,-2.0816682e-15,31.25),PxVec3(-12.5,-1.3877788e-15,31.25),PxVec3(-6.25,-6.938894e-16,31.25),PxVec3(0.0,0.0,31.25),PxVec3(6.25,6.938894e-16,31.25),PxVec3(12.5,1.3877788e-15,31.25),PxVec3(18.75,2.0816682e-15,31.25),PxVec3(25.0,2.7755576e-15,31.25),PxVec3(31.25,3.469447e-15,31.25),PxVec3(37.5,4.1633363e-15,31.25),PxVec3(43.75,4.8572257e-15,31.25),PxVec3(50.0,5.551115e-15,31.25),PxVec3(56.25,6.2450045e-15,31.25),PxVec3(62.5,6.938894e-15,31.25),PxVec3(68.75,7.632783e-15,31.25),PxVec3(75.0,8.326673e-15,31.25),PxVec3(81.25,9.020562e-15,31.25),PxVec3(87.5,9.7144515e-15,31.25),PxVec3(93.75,1.0408341e-14,31.25),PxVec3(100.0,1.110223e-14,31.25),PxVec3(-100.0,-1.110223e-14,37.5),PxVec3(-93.75,-1.0408341e-14,37.5),PxVec3(-87.5,-9.7144515e-15,37.5),PxVec3(-81.25,-9.020562e-15,37.5),PxVec3(-75.0,-8.326673e-15,37.5),PxVec3(-68.75,-7.632783e-15,37.5),PxVec3(-62.5,-6.938894e-15,37.5),PxVec3(-56.25,-6.2450045e-15,37.5),PxVec3(-50.0,-5.551115e-15,37.5),PxVec3(-43.75,-4.8572257e-15,37.5),PxVec3(-37.5,-4.1633363e-15,37.5),PxVec3(-31.25,-3.469447e-15,37.5),PxVec3(-25.0,-2.7755576e-15,37.5),PxVec3(-18.75,-2.0816682e-15,37.5),PxVec3(-12.5,-1.3877788e-15,37.5),PxVec3(-6.25,-6.938894e-16,37.5),PxVec3(0.0,0.0,37.5),PxVec3(6.25,6.938894e-16,37.5),PxVec3(12.5,1.3877788e-15,37.5),PxVec3(18.75,2.0816682e-15,37.5),PxVec3(25.0,2.7755576e-15,37.5),PxVec3(31.25,3.469447e-15,37.5),PxVec3(37.5,4.1633363e-15,37.5),PxVec3(43.75,4.8572257e-15,37.5),PxVec3(50.0,5.551115e-15,37.5),PxVec3(56.25,6.2450045e-15,37.5),PxVec3(62.5,6.938894e-15,37.5),PxVec3(68.75,7.632783e-15,37.5),PxVec3(75.0,8.326673e-15,37.5),PxVec3(81.25,9.020562e-15,37.5),PxVec3(87.5,9.7144515e-15,37.5),PxVec3(93.75,1.0408341e-14,37.5),PxVec3(100.0,1.110223e-14,37.5),PxVec3(-100.0,-1.110223e-14,43.75),PxVec3(-93.75,-1.0408341e-14,43.75),PxVec3(-87.5,-9.7144515e-15,43.75),PxVec3(-81.25,-9.020562e-15,43.75),PxVec3(-75.0,-8.326673e-15,43.75),PxVec3(-68.75,-7.632783e-15,43.75),PxVec3(-62.5,-6.938894e-15,43.75),PxVec3(-56.25,-6.2450045e-15,43.75),PxVec3(-50.0,-5.551115e-15,43.75),PxVec3(-43.75,-4.8572257e-15,43.75),PxVec3(-37.5,-4.1633363e-15,43.75),PxVec3(-31.25,-3.469447e-15,43.75),PxVec3(-25.0,-2.7755576e-15,43.75),PxVec3(-18.75,-2.0816682e-15,43.75),PxVec3(-12.5,-1.3877788e-15,43.75),PxVec3(-6.25,-6.938894e-16,43.75),PxVec3(0.0,0.0,43.75),PxVec3(6.25,6.938894e-16,43.75),PxVec3(12.5,1.3877788e-15,43.75),PxVec3(18.75,2.0816682e-15,43.75),PxVec3(25.0,2.7755576e-15,43.75),PxVec3(31.25,3.469447e-15,43.75),PxVec3(37.5,4.1633363e-15,43.75),PxVec3(43.75,4.8572257e-15,43.75),PxVec3(50.0,5.551115e-15,43.75),PxVec3(56.25,6.2450045e-15,43.75),PxVec3(62.5,6.938894e-15,43.75),PxVec3(68.75,7.632783e-15,43.75),PxVec3(75.0,8.326673e-15,43.75),PxVec3(81.25,9.020562e-15,43.75),PxVec3(87.5,9.7144515e-15,43.75),PxVec3(93.75,1.0408341e-14,43.75),PxVec3(100.0,1.110223e-14,43.75),PxVec3(-100.0,-1.110223e-14,50.0),PxVec3(-93.75,-1.0408341e-14,50.0),PxVec3(-87.5,-9.7144515e-15,50.0),PxVec3(-81.25,-9.020562e-15,50.0),PxVec3(-75.0,-8.326673e-15,50.0),PxVec3(-68.75,-7.632783e-15,50.0),PxVec3(-62.5,-6.938894e-15,50.0),PxVec3(-56.25,-6.2450045e-15,50.0),PxVec3(-50.0,-5.551115e-15,50.0),PxVec3(-43.75,-4.8572257e-15,50.0),PxVec3(-37.5,-4.1633363e-15,50.0),PxVec3(-31.25,-3.469447e-15,50.0),PxVec3(-25.0,-2.7755576e-15,50.0),PxVec3(-18.75,-2.0816682e-15,50.0),PxVec3(-12.5,-1.3877788e-15,50.0),PxVec3(-6.25,-6.938894e-16,50.0),PxVec3(0.0,0.0,50.0),PxVec3(6.25,6.938894e-16,50.0),PxVec3(12.5,1.3877788e-15,50.0),PxVec3(18.75,2.0816682e-15,50.0),PxVec3(25.0,2.7755576e-15,50.0),PxVec3(31.25,3.469447e-15,50.0),PxVec3(37.5,4.1633363e-15,50.0),PxVec3(43.75,4.8572257e-15,50.0),PxVec3(50.0,5.551115e-15,50.0),PxVec3(56.25,6.2450045e-15,50.0),PxVec3(62.5,6.938894e-15,50.0),PxVec3(68.75,7.632783e-15,50.0),PxVec3(75.0,8.326673e-15,50.0),PxVec3(81.25,9.020562e-15,50.0),PxVec3(87.5,9.7144515e-15,50.0),PxVec3(93.75,1.0408341e-14,50.0),PxVec3(100.0,1.110223e-14,50.0),PxVec3(-100.0,-1.110223e-14,56.25),PxVec3(-93.75,-1.0408341e-14,56.25),PxVec3(-87.5,-9.7144515e-15,56.25),PxVec3(-81.25,-9.020562e-15,56.25),PxVec3(-75.0,-8.326673e-15,56.25),PxVec3(-68.75,-7.632783e-15,56.25),PxVec3(-62.5,-6.938894e-15,56.25),PxVec3(-56.25,-6.2450045e-15,56.25),PxVec3(-50.0,-5.551115e-15,56.25),PxVec3(-43.75,-4.8572257e-15,56.25),PxVec3(-37.5,-4.1633363e-15,56.25),PxVec3(-31.25,-3.469447e-15,56.25),PxVec3(-25.0,-2.7755576e-15,56.25),PxVec3(-18.75,-2.0816682e-15,56.25),PxVec3(-12.5,-1.3877788e-15,56.25),PxVec3(-6.25,-6.938894e-16,56.25),PxVec3(0.0,0.0,56.25),PxVec3(6.25,6.938894e-16,56.25),PxVec3(12.5,1.3877788e-15,56.25),PxVec3(18.75,2.0816682e-15,56.25),PxVec3(25.0,2.7755576e-15,56.25),PxVec3(31.25,3.469447e-15,56.25),PxVec3(37.5,4.1633363e-15,56.25),PxVec3(43.75,4.8572257e-15,56.25),PxVec3(50.0,5.551115e-15,56.25),PxVec3(56.25,6.2450045e-15,56.25),PxVec3(62.5,6.938894e-15,56.25),PxVec3(68.75,7.632783e-15,56.25),PxVec3(75.0,8.326673e-15,56.25),PxVec3(81.25,9.020562e-15,56.25),PxVec3(87.5,9.7144515e-15,56.25),PxVec3(93.75,1.0408341e-14,56.25),PxVec3(100.0,1.110223e-14,56.25),PxVec3(-100.0,-1.110223e-14,62.5),PxVec3(-93.75,-1.0408341e-14,62.5),PxVec3(-87.5,-9.7144515e-15,62.5),PxVec3(-81.25,-9.020562e-15,62.5),PxVec3(-75.0,-8.326673e-15,62.5),PxVec3(-68.75,-7.632783e-15,62.5),PxVec3(-62.5,-6.938894e-15,62.5),PxVec3(-56.25,-6.2450045e-15,62.5),PxVec3(-50.0,-5.551115e-15,62.5),PxVec3(-43.75,-4.8572257e-15,62.5),PxVec3(-37.5,-4.1633363e-15,62.5),PxVec3(-31.25,-3.469447e-15,62.5),PxVec3(-25.0,-2.7755576e-15,62.5),PxVec3(-18.75,-2.0816682e-15,62.5),PxVec3(-12.5,-1.3877788e-15,62.5),PxVec3(-6.25,-6.938894e-16,62.5),PxVec3(0.0,0.0,62.5),PxVec3(6.25,6.938894e-16,62.5),PxVec3(12.5,1.3877788e-15,62.5),PxVec3(18.75,2.0816682e-15,62.5),PxVec3(25.0,2.7755576e-15,62.5),PxVec3(31.25,3.469447e-15,62.5),PxVec3(37.5,4.1633363e-15,62.5),PxVec3(43.75,4.8572257e-15,62.5),PxVec3(50.0,5.551115e-15,62.5),PxVec3(56.25,6.2450045e-15,62.5),PxVec3(62.5,6.938894e-15,62.5),PxVec3(68.75,7.632783e-15,62.5),PxVec3(75.0,8.326673e-15,62.5),PxVec3(81.25,9.020562e-15,62.5),PxVec3(87.5,9.7144515e-15,62.5),PxVec3(93.75,1.0408341e-14,62.5),PxVec3(100.0,1.110223e-14,62.5),PxVec3(-100.0,-1.110223e-14,68.75),PxVec3(-93.75,-1.0408341e-14,68.75),PxVec3(-87.5,-9.7144515e-15,68.75),PxVec3(-81.25,-9.020562e-15,68.75),PxVec3(-75.0,-8.326673e-15,68.75),PxVec3(-68.75,-7.632783e-15,68.75),PxVec3(-62.5,-6.938894e-15,68.75),PxVec3(-56.25,-6.2450045e-15,68.75),PxVec3(-50.0,-5.551115e-15,68.75),PxVec3(-43.75,-4.8572257e-15,68.75),PxVec3(-37.5,-4.1633363e-15,68.75),PxVec3(-31.25,-3.469447e-15,68.75),PxVec3(-25.0,-2.7755576e-15,68.75),PxVec3(-18.75,-2.0816682e-15,68.75),PxVec3(-12.5,-1.3877788e-15,68.75),PxVec3(-6.25,-6.938894e-16,68.75),PxVec3(0.0,0.0,68.75),PxVec3(6.25,6.938894e-16,68.75),PxVec3(12.5,1.3877788e-15,68.75),PxVec3(18.75,2.0816682e-15,68.75),PxVec3(25.0,2.7755576e-15,68.75),PxVec3(31.25,3.469447e-15,68.75),PxVec3(37.5,4.1633363e-15,68.75),PxVec3(43.75,4.8572257e-15,68.75),PxVec3(50.0,5.551115e-15,68.75),PxVec3(56.25,6.2450045e-15,68.75),PxVec3(62.5,6.938894e-15,68.75),PxVec3(68.75,7.632783e-15,68.75),PxVec3(75.0,8.326673e-15,68.75),PxVec3(81.25,9.020562e-15,68.75),PxVec3(87.5,9.7144515e-15,68.75),PxVec3(93.75,1.0408341e-14,68.75),PxVec3(100.0,1.110223e-14,68.75),PxVec3(-100.0,-1.110223e-14,75.0),PxVec3(-93.75,-1.0408341e-14,75.0),PxVec3(-87.5,-9.7144515e-15,75.0),PxVec3(-81.25,-9.020562e-15,75.0),PxVec3(-75.0,-8.326673e-15,75.0),PxVec3(-68.75,-7.632783e-15,75.0),PxVec3(-62.5,-6.938894e-15,75.0),PxVec3(-56.25,-6.2450045e-15,75.0),PxVec3(-50.0,-5.551115e-15,75.0),PxVec3(-43.75,-4.8572257e-15,75.0),PxVec3(-37.5,-4.1633363e-15,75.0),PxVec3(-31.25,-3.469447e-15,75.0),PxVec3(-25.0,-2.7755576e-15,75.0),PxVec3(-18.75,-2.0816682e-15,75.0),PxVec3(-12.5,-1.3877788e-15,75.0),PxVec3(-6.25,-6.938894e-16,75.0),PxVec3(0.0,0.0,75.0),PxVec3(6.25,6.938894e-16,75.0),PxVec3(12.5,1.3877788e-15,75.0),PxVec3(18.75,2.0816682e-15,75.0),PxVec3(25.0,2.7755576e-15,75.0),PxVec3(31.25,3.469447e-15,75.0),PxVec3(37.5,4.1633363e-15,75.0),PxVec3(43.75,4.8572257e-15,75.0),PxVec3(50.0,5.551115e-15,75.0),PxVec3(56.25,6.2450045e-15,75.0),PxVec3(62.5,6.938894e-15,75.0),PxVec3(68.75,7.632783e-15,75.0),PxVec3(75.0,8.326673e-15,75.0),PxVec3(81.25,9.020562e-15,75.0),PxVec3(87.5,9.7144515e-15,75.0),PxVec3(93.75,1.0408341e-14,75.0),PxVec3(100.0,1.110223e-14,75.0),PxVec3(-100.0,-1.110223e-14,81.25),PxVec3(-93.75,-1.0408341e-14,81.25),PxVec3(-87.5,-9.7144515e-15,81.25),PxVec3(-81.25,-9.020562e-15,81.25),PxVec3(-75.0,-8.326673e-15,81.25),PxVec3(-68.75,-7.632783e-15,81.25),PxVec3(-62.5,-6.938894e-15,81.25),PxVec3(-56.25,-6.2450045e-15,81.25),PxVec3(-50.0,-5.551115e-15,81.25),PxVec3(-43.75,-4.8572257e-15,81.25),PxVec3(-37.5,-4.1633363e-15,81.25),PxVec3(-31.25,-3.469447e-15,81.25),PxVec3(-25.0,-2.7755576e-15,81.25),PxVec3(-18.75,-2.0816682e-15,81.25),PxVec3(-12.5,-1.3877788e-15,81.25),PxVec3(-6.25,-6.938894e-16,81.25),PxVec3(0.0,0.0,81.25),PxVec3(6.25,6.938894e-16,81.25),PxVec3(12.5,1.3877788e-15,81.25),PxVec3(18.75,2.0816682e-15,81.25),PxVec3(25.0,2.7755576e-15,81.25),PxVec3(31.25,3.469447e-15,81.25),PxVec3(37.5,4.1633363e-15,81.25),PxVec3(43.75,4.8572257e-15,81.25),PxVec3(50.0,5.551115e-15,81.25),PxVec3(56.25,6.2450045e-15,81.25),PxVec3(62.5,6.938894e-15,81.25),PxVec3(68.75,7.632783e-15,81.25),PxVec3(75.0,8.326673e-15,81.25),PxVec3(81.25,9.020562e-15,81.25),PxVec3(87.5,9.7144515e-15,81.25),PxVec3(93.75,1.0408341e-14,81.25),PxVec3(100.0,1.110223e-14,81.25),PxVec3(-100.0,-1.110223e-14,87.5),PxVec3(-93.75,-1.0408341e-14,87.5),PxVec3(-87.5,-9.7144515e-15,87.5),PxVec3(-81.25,-9.020562e-15,87.5),PxVec3(-75.0,-8.326673e-15,87.5),PxVec3(-68.75,-7.632783e-15,87.5),PxVec3(-62.5,-6.938894e-15,87.5),PxVec3(-56.25,-6.2450045e-15,87.5),PxVec3(-50.0,-5.551115e-15,87.5),PxVec3(-43.75,-4.8572257e-15,87.5),PxVec3(-37.5,-4.1633363e-15,87.5),PxVec3(-31.25,-3.469447e-15,87.5),PxVec3(-25.0,-2.7755576e-15,87.5),PxVec3(-18.75,-2.0816682e-15,87.5),PxVec3(-12.5,-1.3877788e-15,87.5),PxVec3(-6.25,-6.938894e-16,87.5),PxVec3(0.0,0.0,87.5),PxVec3(6.25,6.938894e-16,87.5),PxVec3(12.5,1.3877788e-15,87.5),PxVec3(18.75,2.0816682e-15,87.5),PxVec3(25.0,2.7755576e-15,87.5),PxVec3(31.25,3.469447e-15,87.5),PxVec3(37.5,4.1633363e-15,87.5),PxVec3(43.75,4.8572257e-15,87.5),PxVec3(50.0,5.551115e-15,87.5),PxVec3(56.25,6.2450045e-15,87.5),PxVec3(62.5,6.938894e-15,87.5),PxVec3(68.75,7.632783e-15,87.5),PxVec3(75.0,8.326673e-15,87.5),PxVec3(81.25,9.020562e-15,87.5),PxVec3(87.5,9.7144515e-15,87.5),PxVec3(93.75,1.0408341e-14,87.5),PxVec3(100.0,1.110223e-14,87.5),PxVec3(-100.0,-1.110223e-14,93.75),PxVec3(-93.75,-1.0408341e-14,93.75),PxVec3(-87.5,-9.7144515e-15,93.75),PxVec3(-81.25,-9.020562e-15,93.75),PxVec3(-75.0,-8.326673e-15,93.75),PxVec3(-68.75,-7.632783e-15,93.75),PxVec3(-62.5,-6.938894e-15,93.75),PxVec3(-56.25,-6.2450045e-15,93.75),PxVec3(-50.0,-5.551115e-15,93.75),PxVec3(-43.75,-4.8572257e-15,93.75),PxVec3(-37.5,-4.1633363e-15,93.75),PxVec3(-31.25,-3.469447e-15,93.75),PxVec3(-25.0,-2.7755576e-15,93.75),PxVec3(-18.75,-2.0816682e-15,93.75),PxVec3(-12.5,-1.3877788e-15,93.75),PxVec3(-6.25,-6.938894e-16,93.75),PxVec3(0.0,0.0,93.75),PxVec3(6.25,6.938894e-16,93.75),PxVec3(12.5,1.3877788e-15,93.75),PxVec3(18.75,2.0816682e-15,93.75),PxVec3(25.0,2.7755576e-15,93.75),PxVec3(31.25,3.469447e-15,93.75),PxVec3(37.5,4.1633363e-15,93.75),PxVec3(43.75,4.8572257e-15,93.75),PxVec3(50.0,5.551115e-15,93.75),PxVec3(56.25,6.2450045e-15,93.75),PxVec3(62.5,6.938894e-15,93.75),PxVec3(68.75,7.632783e-15,93.75),PxVec3(75.0,8.326673e-15,93.75),PxVec3(81.25,9.020562e-15,93.75),PxVec3(87.5,9.7144515e-15,93.75),PxVec3(93.75,1.0408341e-14,93.75),PxVec3(100.0,1.110223e-14,93.75),PxVec3(-100.0,-1.110223e-14,100.0),PxVec3(-93.75,-1.0408341e-14,100.0),PxVec3(-87.5,-9.7144515e-15,100.0),PxVec3(-81.25,-9.020562e-15,100.0),PxVec3(-75.0,-8.326673e-15,100.0),PxVec3(-68.75,-7.632783e-15,100.0),PxVec3(-62.5,-6.938894e-15,100.0),PxVec3(-56.25,-6.2450045e-15,100.0),PxVec3(-50.0,-5.551115e-15,100.0),PxVec3(-43.75,-4.8572257e-15,100.0),PxVec3(-37.5,-4.1633363e-15,100.0),PxVec3(-31.25,-3.469447e-15,100.0),PxVec3(-25.0,-2.7755576e-15,100.0),PxVec3(-18.75,-2.0816682e-15,100.0),PxVec3(-12.5,-1.3877788e-15,100.0),PxVec3(-6.25,-6.938894e-16,100.0),PxVec3(0.0,0.0,100.0),PxVec3(6.25,6.938894e-16,100.0),PxVec3(12.5,1.3877788e-15,100.0),PxVec3(18.75,2.0816682e-15,100.0),PxVec3(25.0,2.7755576e-15,100.0),PxVec3(31.25,3.469447e-15,100.0),PxVec3(37.5,4.1633363e-15,100.0),PxVec3(43.75,4.8572257e-15,100.0),PxVec3(50.0,5.551115e-15,100.0),PxVec3(56.25,6.2450045e-15,100.0),PxVec3(62.5,6.938894e-15,100.0),PxVec3(68.75,7.632783e-15,100.0),PxVec3(75.0,8.326673e-15,100.0),PxVec3(81.25,9.020562e-15,100.0),PxVec3(87.5,9.7144515e-15,100.0),PxVec3(93.75,1.0408341e-14,100.0),PxVec3(100.0,1.110223e-14,100.0)};


  return createConvexMesh(verts.data(),verts.size(),physics,cooking);
}


PxConvexMesh* 
CreateFromVectors2DConvexMesh(std::vector< std::vector<float> > vcoords, PxPhysics *physics, PxCooking *cooking)
{
  std::vector<PxVec3> verts; 
  for(auto c:vcoords)
  {
    assert(c.size() == 3); 
    verts.push_back( PxVec3(c[0],c[1],c[2]) );   
  }

  return createConvexMesh(verts.data(),verts.size(),physics,cooking);
}


PxConvexMesh*
CreateTruncatedCubeMesh(PxPhysics *physics, PxCooking *cooking)
{
  return CreateFromVectors2DConvexMesh(truncatedcube, physics, cooking);
}


PxConvexMesh* 
CreateTruncatedCubeMeshTest(PxPhysics *physics, PxCooking *cooking, std::string fcoords = "Sources/truncated_cube.dat")
{
  std::vector< std::vector<float> > coords;
  LoadFile(fcoords, coords, true);

  bool result = std::equal(coords.begin(), coords.end(), truncatedcube.begin());
  if (result) std::cout <<"[CreateTruncatedCubeMesh] Both vectors are equal" << std::endl;
  assert(result); 
 
  return CreateFromVectors2DConvexMesh(coords, physics, cooking);
}

 
PxConvexMesh* 
CreateFromFileConvexMesh(std::string fcoords, PxPhysics *physics, PxCooking *cooking, bool show=false)
{
  std::vector< std::vector<float> > coords;
  LoadFile(fcoords, coords, show);

  return CreateFromVectors2DConvexMesh(coords, physics, cooking);
}


